//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Main/Inputs/CarInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInputActions"",
    ""maps"": [
        {
            ""name"": ""Handling"",
            ""id"": ""692e9186-2938-4054-88a3-243fe6b5b140"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""98c8c9a0-9d76-468a-a6de-996e6e37b035"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EmergencyBrake"",
                    ""type"": ""Button"",
                    ""id"": ""f9ece945-a423-41ad-8327-5d6ee0a8317f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f68029ac-8af7-44b2-bfa1-dc08d719af0b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmergencyBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6bf9021b-4602-41aa-a6e5-8f58a85433da"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8a997259-ccd3-41c5-991f-aae5d86be78c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b5d6869c-85b9-4d82-98b6-b9bc22f1dc28"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ae9b2221-53a0-420b-bf5a-2c393c01de26"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f4be802-f5df-487d-b54f-c9b73f4077de"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Handling
        m_Handling = asset.FindActionMap("Handling", throwIfNotFound: true);
        m_Handling_Movement = m_Handling.FindAction("Movement", throwIfNotFound: true);
        m_Handling_EmergencyBrake = m_Handling.FindAction("EmergencyBrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Handling
    private readonly InputActionMap m_Handling;
    private IHandlingActions m_HandlingActionsCallbackInterface;
    private readonly InputAction m_Handling_Movement;
    private readonly InputAction m_Handling_EmergencyBrake;
    public struct HandlingActions
    {
        private @CarInputActions m_Wrapper;
        public HandlingActions(@CarInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Handling_Movement;
        public InputAction @EmergencyBrake => m_Wrapper.m_Handling_EmergencyBrake;
        public InputActionMap Get() { return m_Wrapper.m_Handling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandlingActions set) { return set.Get(); }
        public void SetCallbacks(IHandlingActions instance)
        {
            if (m_Wrapper.m_HandlingActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_HandlingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_HandlingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_HandlingActionsCallbackInterface.OnMovement;
                @EmergencyBrake.started -= m_Wrapper.m_HandlingActionsCallbackInterface.OnEmergencyBrake;
                @EmergencyBrake.performed -= m_Wrapper.m_HandlingActionsCallbackInterface.OnEmergencyBrake;
                @EmergencyBrake.canceled -= m_Wrapper.m_HandlingActionsCallbackInterface.OnEmergencyBrake;
            }
            m_Wrapper.m_HandlingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @EmergencyBrake.started += instance.OnEmergencyBrake;
                @EmergencyBrake.performed += instance.OnEmergencyBrake;
                @EmergencyBrake.canceled += instance.OnEmergencyBrake;
            }
        }
    }
    public HandlingActions @Handling => new HandlingActions(this);
    public interface IHandlingActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnEmergencyBrake(InputAction.CallbackContext context);
    }
}
